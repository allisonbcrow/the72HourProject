{"ast":null,"code":"var _jsxFileName = \"C:\\\\ElevenFiftyBlueBadge\\\\72hourproj\\\\src\\\\components\\\\apps\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = 'api.openweathermap.org/data/2.5/weather?;';\nconst key = '3b66b0c3c2f2e8c4e63630359492b5bf';\n\nconst Weather = () => {\n  _s();\n\n  const [latitude, setlatitude] = useState('');\n  const [longitude, setlongitude] = useState('');\n  const [city, setcity] = useState('');\n  const [temperature, setTemperature] = useState([]);\n\n  const fetchResults = () => {\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=indianapolis&appid=${key}`; // let url = `${baseURL}at=${latitude}&lon=${longitude}&appid=${key}&units=metric`\n    // url = latitude ? url + `&latitude=${latitude}` : url;\n    // url = longitude ? url + `&longitude=${longitude}` : url;\n  };\n\n  let fetchURL = async () => {\n    let response = await fetch(baseURL);\n    let data = await response.json();\n    setTemperature(data.main.temp);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-item\",\n        children: [city, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-item\",\n        children: [temperature, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 13\n  }, this);\n}; // getPosition = () => {\n//   return new Promise(function (resolve, reject) {\n//     navigator.geolocation.getCurrentPosition(resolve, reject);\n//   });\n// }\n// getWeather = async (latitude, longitude) => {\n//   let WEATHER_API_KEY= '3b66b0c3c2f2e8c4e63630359492b5bf';\n//   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?;at=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\n//   const data = await api_call.json();\n//   this.setState({\n//     lat: latitude,\n//     lon: longitude,\n//     city: data.name,\n//     temperatureC: Math.round(data.main.temp),\n//     temperatureF: Math.round((data.main.temp) * 1.8 + 32),\n//     icon: data.weather[0].icon,  \n//   })\n// }\n// componentDidMount() {\n//   this.getPosition()\n//   .then((position) => {\n//     this.getWeather(position.coords.latitude, position.coords.longitude)\n//   })\n//   .catch((err) => {\n//     this.setState({ errorMessage: err.message });\n//   });\n//   this.timerID = setInterval(\n//     () => \n//     this.getWeather(this.state.lat, this.state.lon),\n//     60000\n//   );\n// }\n// componentWillUnmount() {\n//   clearInterval(this.timerID);\n// }\n// render() {\n//   const { city, temperatureC, temperatureF, icon} = this.state;\n//    if (city) {\n//      return (\n//     <div className=\"App\">\n//       <div className=\"weather-box\">\n//         <div className=\"weather-item\">{city}</div>\n//         <div className=\"weather-item\">{temperatureC} &deg;C <span className=\"slash\">/</span> {temperatureF} &deg;F</div>\n//         <div>\n//           <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\n//       </div>\n//     </div>\n//     </div>\n//      );\n//    }\n//   else {\n//     return (\n//       <div>Loading...</div>\n//     )\n//   }}}\n\n\n_s(Weather, \"+LGcdzrCaInfDwwHv5TYvcJKiPU=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/ElevenFiftyBlueBadge/72hourproj/src/components/apps/Weather.js"],"names":["React","useState","baseURL","key","Weather","latitude","setlatitude","longitude","setlongitude","city","setcity","temperature","setTemperature","fetchResults","url","fetchURL","response","fetch","data","json","main","temp"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,OAAO,GAAG,2CAAhB;AACA,MAAMC,GAAG,GAAG,kCAAZ;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;;AAGA,QAAMY,YAAY,GAAG,MAAM;AACzB,QAAIC,GAAG,GAAI,wEAAuEX,GAAI,EAAtF,CADyB,CAEzB;AACA;AACA;AACD,GALD;;AAOA,MAAIY,QAAQ,GAAG,YAAY;AACzB,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACf,OAAD,CAA1B;AACA,QAAIgB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACAP,IAAAA,cAAc,CAACM,IAAI,CAACE,IAAL,CAAUC,IAAX,CAAd;AACD,GAJD;;AAMQ,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,mBAA+BZ,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,mBAA+BE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQT,CA5BD,C,CA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA3FMP,O;;KAAAA,O;AAgGN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst baseURL = 'api.openweathermap.org/data/2.5/weather?;';\r\nconst key = '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n\r\n\r\nconst Weather = () => {\r\n  const [latitude, setlatitude] = useState('');\r\n  const [longitude, setlongitude] = useState('');\r\n  const [city, setcity] = useState('');\r\n  const [temperature, setTemperature] = useState([]);\r\n\r\n\r\n  const fetchResults = () => {\r\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=indianapolis&appid=${key}`;\r\n    // let url = `${baseURL}at=${latitude}&lon=${longitude}&appid=${key}&units=metric`\r\n    // url = latitude ? url + `&latitude=${latitude}` : url;\r\n    // url = longitude ? url + `&longitude=${longitude}` : url;\r\n  }\r\n\r\n  let fetchURL = async () => {\r\n    let response = await fetch(baseURL);\r\n    let data = await response.json();\r\n    setTemperature(data.main.temp);\r\n  };\r\n\r\n          return (\r\n            <div className=\"main\">\r\n              <div className=\"mainDiv\">\r\n                <div className=\"weather-item\">{city} </div>\r\n                <div className=\"weather-item\">{temperature} </div>\r\n              </div>\r\n            </div>\r\n          )\r\n};\r\n\r\n\r\n// getPosition = () => {\r\n//   return new Promise(function (resolve, reject) {\r\n//     navigator.geolocation.getCurrentPosition(resolve, reject);\r\n//   });\r\n// }\r\n// getWeather = async (latitude, longitude) => {\r\n//   let WEATHER_API_KEY= '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n//   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?;at=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\r\n//   const data = await api_call.json();\r\n\r\n\r\n//   this.setState({\r\n//     lat: latitude,\r\n//     lon: longitude,\r\n//     city: data.name,\r\n//     temperatureC: Math.round(data.main.temp),\r\n//     temperatureF: Math.round((data.main.temp) * 1.8 + 32),\r\n//     icon: data.weather[0].icon,  \r\n//   })\r\n// }\r\n\r\n// componentDidMount() {\r\n//   this.getPosition()\r\n//   .then((position) => {\r\n//     this.getWeather(position.coords.latitude, position.coords.longitude)\r\n//   })\r\n//   .catch((err) => {\r\n//     this.setState({ errorMessage: err.message });\r\n//   });\r\n\r\n//   this.timerID = setInterval(\r\n//     () => \r\n//     this.getWeather(this.state.lat, this.state.lon),\r\n//     60000\r\n//   );\r\n// }\r\n\r\n// componentWillUnmount() {\r\n//   clearInterval(this.timerID);\r\n// }\r\n\r\n// render() {\r\n//   const { city, temperatureC, temperatureF, icon} = this.state;\r\n//    if (city) {\r\n//      return (\r\n//     <div className=\"App\">\r\n//       <div className=\"weather-box\">\r\n//         <div className=\"weather-item\">{city}</div>\r\n//         <div className=\"weather-item\">{temperatureC} &deg;C <span className=\"slash\">/</span> {temperatureF} &deg;F</div>\r\n//         <div>\r\n//           <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\r\n//       </div>\r\n//     </div>\r\n//     </div>\r\n//      );\r\n//    }\r\n//   else {\r\n//     return (\r\n//       <div>Loading...</div>\r\n//     )\r\n//   }}}\r\n\r\n\r\n\r\n\r\nexport default Weather;\r\n"]},"metadata":{},"sourceType":"module"}