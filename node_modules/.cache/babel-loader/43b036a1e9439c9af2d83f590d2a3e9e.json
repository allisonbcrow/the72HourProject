{"ast":null,"code":"var _jsxFileName = \"C:\\\\ElevenFiftyBlueBadge\\\\72hourproj\\\\src\\\\components\\\\apps\\\\Weather.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Weather extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      city: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      icon: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      errorMessage: undefined\n    };\n\n    this.getPosition = () => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    };\n\n    this.getWeather = async (latititude, longitude) => {\n      const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?;at=${latititude}&lon=${longitude}&appid=${process.env.WEATHER_API_KEY}&units=metric`);\n      const data = await api_call.json();\n      this.setState({\n        lat: latititude,\n        lon: longitude,\n        city: data.name,\n        temperatureC: Math.round(data.main.temp),\n        temperatureF: Math.round(data.main.temp * 1.8 + 32),\n        icon: data.weather[0].icon,\n        sunrise: moment.unix(Data.sys.sunrise).format(\"hh:mm a\"),\n        sunset: moment.unix(data.sys.sunset).format(\"hh:mm a\")\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPosition().then(position => {\n      this.getWeather(position.coords.latitude, position.coords.longitude);\n    }).catch(err => {\n      this.setState({\n        errorMessage: err.message\n      });\n    });\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 60000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    const {\n      city,\n      temperatureC,\n      temperatureF,\n      icon,\n      sunrise,\n      sunset\n    } = this.state;\n\n    if (city) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-item\",\n            children: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-item\",\n            children: [temperatureC, \" \\xB0C \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"slash\",\n              children: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 61\n            }, this), \" \", temperatureF, \" \\xB0F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"weather-icon\",\n              src: `http://openweathermap.org/img/w/${icon}.png`,\n              alt: \"weather icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather=item\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"sunrise: \", sunrise]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-item\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"sunset: \", sunset]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this);\n    }\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/ElevenFiftyBlueBadge/72hourproj/src/components/apps/Weather.js"],"names":["React","Component","moment","Weather","state","lat","undefined","lon","city","temperatureC","temperatureF","icon","sunrise","sunset","errorMessage","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","latititude","longitude","api_call","fetch","process","env","WEATHER_API_KEY","data","json","setState","name","Math","round","main","temp","weather","unix","Data","sys","format","componentDidMount","then","position","coords","latitude","catch","err","message","timerID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nclass Weather extends Component {\r\nstate = {\r\n  lat: undefined,\r\n  lon: undefined,\r\n  city: undefined,\r\n  temperatureC: undefined,\r\n  temperatureF: undefined,\r\n  icon: undefined,\r\n  sunrise: undefined,\r\n  sunset: undefined,\r\n  errorMessage: undefined,\r\n}\r\n\r\ngetPosition = () => {\r\n  return new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\ngetWeather = async (latititude, longitude) => {\r\n  const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?;at=${latititude}&lon=${longitude}&appid=${process.env.WEATHER_API_KEY}&units=metric`);\r\n  const data = await api_call.json();\r\n  this.setState({\r\n    lat: latititude,\r\n    lon: longitude,\r\n    city: data.name,\r\n    temperatureC: Math.round(data.main.temp),\r\n    temperatureF: Math.round(data.main.temp * 1.8 + 32),\r\n    icon: data.weather[0].icon,\r\n    sunrise: moment.unix(Data.sys.sunrise).format(\"hh:mm a\"),\r\n    sunset: moment.unix(data.sys.sunset).format(\"hh:mm a\"),\r\n  })\r\n}\r\n\r\ncomponentDidMount() {\r\n  this.getPosition()\r\n  .then((position) => {\r\n    this.getWeather(position.coords.latitude, position.coords.longitude)\r\n  })\r\n  .catch((err) => {\r\n    this.setState({ errorMessage: err.message });\r\n  });\r\n\r\n  this.timerID = setInterval(\r\n    () => \r\n    this.getWeather(this.state.lat, this.state.lon),\r\n    60000\r\n  );\r\n}\r\n\r\ncomponentWillUnmount() {\r\n  clearInterval(this.timerID);\r\n}\r\n\r\nrender() {\r\n  const { city, temperatureC, temperatureF, icon, sunrise, sunset} = this.state;\r\n   if (city) {\r\n     return (\r\n    <div className=\"App\">\r\n      <div className=\"weather-box\">\r\n        <div className=\"weather-item\">{city}</div>\r\n        <div className=\"weather-item\">{temperatureC} &deg;C <span className=\"slash\">/</span> {temperatureF} &deg;F</div>\r\n        <div>\r\n          <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\r\n      </div>\r\n      <div className=\"weather=item\">\r\n        <span>sunrise: {sunrise}</span>\r\n      </div>\r\n      <div className=\"weather-item\">\r\n        <span>sunset: {sunset}</span>\r\n      </div>\r\n    </div>\r\n    </div>\r\n     );\r\n   }\r\n  else {\r\n    return (\r\n      <div>Loading...</div>\r\n    )\r\n  }}}\r\n\r\n\r\n\r\n\r\nexport default Weather;\r\n"]},"metadata":{},"sourceType":"module"}