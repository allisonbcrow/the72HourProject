{"ast":null,"code":"var _jsxFileName = \"C:\\\\ElevenFiftyBlueBadge\\\\72hourproj\\\\src\\\\components\\\\apps\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { geolocated } from \"react-geolocated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;\n  const [localweather, setLocalweather] = useState([]);\n  const [query, setQuery] = useState('');\n  const [temp, setTemp] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [newNum, setNewNum] = useState('');\n\n  const getLonLat = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lon = position.coords.longitude;\n        const lat = position.coords.latitude;\n        return;\n      }).catch(err => console.log(err));\n    }\n  };\n} // useEffect(() => {\n//     getLonLat();\n// }, [])\n\n\n_s(Weather, \"BdLvG/Tms6aN/Sy2tnTw7QUiyEc=\");\n\n_c = Weather;\n\nconst searchInput = e => {\n  e.preventDefault();\n  fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${API_KEY}`).then(response => response.json()).then(result => {\n    setLocalweather(data.main.temp);\n    setQuery(\"\");\n  }).catch(err => console.log(err));\n};\n\nconst oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\n\nconst convert = () => {\n  if (unit === \"C\") {\n    const newNum = temp * 1.8 + 32;\n    setTemp(Math.round(newNum));\n    setUnit(oppositeUnit);\n  }\n\n  if (unit === \"F\") {\n    const newNum = (temp - 32) * 5 / 9;\n    setTemp(Math.round(newNum));\n    setUnit(oppositeUnit);\n  }\n};\n\nfunction weatherDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature \", props.newNum, \" \", props.unit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.convert,\n      children: [\"Convert to \", props.oppositeUnit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"value\",\n      children: [props.newNum, props.unit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 4\n  }, this);\n}\n\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/ElevenFiftyBlueBadge/72hourproj/src/components/apps/Weather.js"],"names":["React","useState","useEffect","geolocated","Weather","API_KEY","url","lat","lon","localweather","setLocalweather","query","setQuery","temp","setTemp","unit","setUnit","newNum","setNewNum","getLonLat","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","catch","err","console","log","searchInput","e","preventDefault","fetch","then","response","json","result","data","main","oppositeUnit","convert","Math","round","weatherDisplay","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { geolocated } from \"react-geolocated\";\r\n\r\nfunction Weather() {\r\n    const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`\r\n    const [localweather, setLocalweather] = useState([]);\r\n    const [query, setQuery] = useState('');\r\n    const [temp, setTemp] = useState(0);\r\n    const [unit, setUnit] = useState('');\r\n    const [newNum, setNewNum] = useState('');\r\n\r\n    \r\n    const getLonLat = () => {\r\n      if(navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          const lon = position.coords.longitude;\r\n          const lat = position.coords.latitude;\r\n            return;\r\n          })\r\n\r\n          .catch(err => console.log(err));\r\n        }\r\n      }\r\n    }\r\n\r\n// useEffect(() => {\r\n//     getLonLat();\r\n// }, [])\r\n\r\n\r\n    const searchInput = (e) => {\r\n        e.preventDefault()\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${API_KEY}`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setLocalweather(data.main.temp)\r\n                setQuery(\"\")\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    const oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\r\n\r\n    const convert = () => {\r\n        if (unit === \"C\") {\r\n            const newNum = temp * 1.8 + 32;\r\n            setTemp(Math.round(newNum));\r\n            setUnit(oppositeUnit);\r\n        }\r\n\r\n        if (unit === \"F\") {\r\n            const newNum = ((temp - 32) * 5) / 9;\r\n            setTemp(Math.round(newNum));\r\n            setUnit(oppositeUnit);\r\n        }\r\n    };\r\n\r\n    function weatherDisplay(props) {\r\n      return (\r\n   <div>\r\n              <p>\r\n                  Temperature {props.newNum} {props.unit}\r\n              </p>\r\n              <button onClick={props.convert}>Convert to {props.oppositeUnit}</button>\r\n              <span className=\"value\">{props.newNum}{props.unit}</span>\r\n\r\n        </div>\r\n\r\n      )}\r\n\r\n\r\nexport default Weather;"]},"metadata":{},"sourceType":"module"}