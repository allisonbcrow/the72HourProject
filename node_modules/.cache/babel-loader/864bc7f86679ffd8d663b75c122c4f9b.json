{"ast":null,"code":"var _jsxFileName = \"C:\\\\ElevenFiftyBlueBadge\\\\72hourproj\\\\src\\\\components\\\\apps\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport { mixedTypeAnnotation } from '@babel/types';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather(props) {\n  _s();\n\n  const [localweather, setLocalweather] = useState('');\n  const [query, setQuery] = useState('');\n  const [temp, setTemp] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [state, setState] = useState([]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lon = position.coords.longitude;\n        const lat = position.coords.latitude;\n        console.log(lat);\n        console.log(lon);\n        const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`).then(res => setState(res.data));\n      }, []);\n    }\n  }); // if (error) {\n  //   return <div>Error: {error.message}</div>;\n  // } else if (!isLoaded) {\n  //   return <div>Loading...</div>;\n  // } else {\n  //   return (\n  //     <ul>\n  //       {data.map(data => (\n  //         <li key={data.main.temp}>\n  //           {main.temp}\n  //         </li>\n  //       ))}\n  //     </ul>\n  //   );\n  // }\n\n  const oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\n\n  const convert = () => {\n    if (unit === \"C\") {\n      temp(({\n        temp\n      } - 273.15).toFixed(0)); // const setTemp = (Math.round(temp));\n\n      setUnit(oppositeUnit);\n    }\n\n    if (unit === \"F\") {\n      temp((({\n        temp\n      } - 273.15) * 1.8 + 32).toFixed(0)); // setTemp=(Math.round(temp));\n\n      setUnit(oppositeUnit);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"(response.map(data => \", main.temp, \"))\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature!\", temp, unit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: convert(),\n      children: [\"Convert to \", oppositeUnit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"value\",\n      children: [temp, unit]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Weather, \"CZgxif0F8BN/jZdzZsVS9XYAHCU=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/ElevenFiftyBlueBadge/72hourproj/src/components/apps/Weather.js"],"names":["mixedTypeAnnotation","React","useState","useEffect","Weather","props","localweather","setLocalweather","query","setQuery","temp","setTemp","unit","setUnit","error","setError","isLoaded","setIsLoaded","items","setItems","state","setState","navigator","geolocation","getCurrentPosition","position","lon","coords","longitude","lat","latitude","console","log","API_KEY","fetch","then","res","data","oppositeUnit","convert","toFixed","main"],"mappings":"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","sourcesContent":["import { mixedTypeAnnotation } from '@babel/types';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nfunction Weather(props) {\r\n  const [localweather, setLocalweather] = useState('');\r\n  const [query, setQuery] = useState('');\r\n  const [temp, setTemp] = useState(0);\r\n  const [unit, setUnit] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  const [state, setState] = useState([])\r\n\r\n   \r\n\r\nuseEffect(() => {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lon = position.coords.longitude;\r\n      const lat = position.coords.latitude;\r\n      console.log(lat);\r\n      console.log(lon);\r\n      const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`)\r\n      .then(\r\n        res => setState(res.data)\r\n    )\r\n}, [])\r\n}})\r\n\r\n// if (error) {\r\n//   return <div>Error: {error.message}</div>;\r\n// } else if (!isLoaded) {\r\n//   return <div>Loading...</div>;\r\n// } else {\r\n//   return (\r\n//     <ul>\r\n//       {data.map(data => (\r\n//         <li key={data.main.temp}>\r\n//           {main.temp}\r\n//         </li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// }\r\n\r\n\r\nconst oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\r\n\r\n \r\n\r\nconst convert = () => {\r\n  if (unit === \"C\") {\r\n    temp(({temp} - 273.15).toFixed(0));\r\n    // const setTemp = (Math.round(temp));\r\n    setUnit(oppositeUnit);\r\n  }\r\n\r\n\r\n  if (unit === \"F\") {\r\n    temp((({temp} - 273.15) * 1.8 + 32).toFixed(0));\r\n    // setTemp=(Math.round(temp));\r\n    setUnit(oppositeUnit);\r\n  }\r\n};\r\n\r\n\r\n    return (\r\n      <div>\r\n(response.map(data => {main.temp}))\r\n        <p>Temperature!{temp}{unit}</p>\r\n        <button onClick={convert()}>Convert to {oppositeUnit}</button>\r\n        <span className=\"value\">{temp}{unit}</span>\r\n\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\n  export default Weather;"]},"metadata":{},"sourceType":"module"}