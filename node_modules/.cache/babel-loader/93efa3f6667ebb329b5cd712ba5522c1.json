{"ast":null,"code":"var _jsxFileName = \"/Users/stephaniefalls/Desktop/BlueBadgeFolder Structure/the72HourProject/src/components/apps/NASA.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NASA = props => {\n  _s();\n\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [status, setStatus] = useState(null);\n  const latlon = lat + lng;\n  const [NASAImg, setNASAImg] = useState(\"\");\n\n  function getNASAImg() {\n    // const baseURL =\n    //   \"https://api.nasa.gov/planetary/earth/imagery/date?api_key=26NGKr0DLIKJVwuABhcPReibvZd7oV2EqeQ3xSR0\";\n    // const key = '26NGKr0DLIKJVwuABhcPReibvZd7oV2EqeQ3xSR0'\n    const testURL = `https://api.nasa.gov/planetary/earth/imagery?lon=${lng}&lat=${lat}&date=2014-02-01&api_key=26NGKr0DLIKJVwuABhcPReibvZd7oV2EqeQ3xSR0`;\n    fetch(testURL).then(res => setNASAImg(res.url));\n  }\n\n  useEffect(() => {\n    if (lat && lng) {\n      getNASAImg();\n    }\n  }, [lat, lng]);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus(\"Geolocation is not supported by your browser\");\n    } else {\n      setStatus(\"Locating...\");\n      navigator.geolocation.getCurrentPosition(position => {\n        setStatus(null);\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n        console.log(latlon);\n      }, () => {\n        setStatus(\"Unable to retrieve your location\");\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Get My Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        height: 190,\n        width: 190\n      },\n      src: NASAImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), lat && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latitude: \", lat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }, this), lng && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Longitude: \", lng]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NASA, \"BI30Cv9WPgSI2b6BqwOjLanoM58=\");\n\n_c = NASA;\nexport default NASA;\n\nvar _c;\n\n$RefreshReg$(_c, \"NASA\");","map":{"version":3,"sources":["/Users/stephaniefalls/Desktop/BlueBadgeFolder Structure/the72HourProject/src/components/apps/NASA.js"],"names":["React","useState","useEffect","NASA","props","lat","setLat","lng","setLng","status","setStatus","latlon","NASAImg","setNASAImg","getNASAImg","testURL","fetch","then","res","url","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","height","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AACA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBL,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMU,MAAM,GAAGN,GAAG,GAAGE,GAArB;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;;AACF,WAASa,UAAT,GAAsB;AACpB;AACA;AACA;AAEA,UAAMC,OAAO,GACV,oDAAmDR,GAAI,QAAOF,GAAI,mEADrE;AAGAW,IAAAA,KAAK,CAACD,OAAD,CAAL,CAAeE,IAAf,CAAqBC,GAAD,IAASL,UAAU,CAACK,GAAG,CAACC,GAAL,CAAvC;AACD;;AAEDjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,GAAG,IAAEE,GAAT,EAAc;AAEVO,MAAAA,UAAU;AACX;AACN,GALQ,EAKN,CAACT,GAAD,EAAKE,GAAL,CALM,CAAT;;AAOA,QAAMa,WAAW,GAAG,MAAM;AACxB,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1BZ,MAAAA,SAAS,CAAC,8CAAD,CAAT;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,CAAC,aAAD,CAAT;AACAW,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;AACZd,QAAAA,SAAS,CAAC,IAAD,CAAT;AACAJ,QAAAA,MAAM,CAACkB,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,CAAN;AACAlB,QAAAA,MAAM,CAACgB,QAAQ,CAACC,MAAT,CAAgBE,SAAjB,CAAN;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AACD,OANH,EAOE,MAAM;AACJD,QAAAA,SAAS,CAAC,kCAAD,CAAT;AACD,OATH;AAWD;AACF,GAjBD;;AAmBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEU,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE;AAAK,MAAA,KAAK,EAAE;AAAEU,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAZ;AAAyC,MAAA,GAAG,EAAEnB;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA,YAHF,EAIGJ,GAAG,iBAAI;AAAA,+BAAcA,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAJV,EAKGE,GAAG,iBAAI;AAAA,gCAAeA,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YALV;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CApDD;;GAAMJ,I;;KAAAA,I;AAsDN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst NASA = (props) => {\n    const [lat, setLat] = useState(null);\n    const [lng, setLng] = useState(null);\n    const [status, setStatus] = useState(null);\n    const latlon = lat + lng;\n    const [NASAImg, setNASAImg] = useState(\"\");\n  function getNASAImg() {\n    // const baseURL =\n    //   \"https://api.nasa.gov/planetary/earth/imagery/date?api_key=26NGKr0DLIKJVwuABhcPReibvZd7oV2EqeQ3xSR0\";\n    // const key = '26NGKr0DLIKJVwuABhcPReibvZd7oV2EqeQ3xSR0'\n\n    const testURL =\n      `https://api.nasa.gov/planetary/earth/imagery?lon=${lng}&lat=${lat}&date=2014-02-01&api_key=26NGKr0DLIKJVwuABhcPReibvZd7oV2EqeQ3xSR0`;\n\n    fetch(testURL).then((res) => setNASAImg(res.url));\n  }\n\n  useEffect(() => {\n      if (lat&&lng) {\n\n          getNASAImg();\n        }\n  }, [lat,lng]);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus(\"Geolocation is not supported by your browser\");\n    } else {\n      setStatus(\"Locating...\");\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setStatus(null);\n          setLat(position.coords.latitude);\n          setLng(position.coords.longitude);\n          console.log(latlon);\n        },\n        () => {\n          setStatus(\"Unable to retrieve your location\");\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n        <button onClick={getLocation}>Get My Location</button>\n      <img style={{ height: 190, width: 190 }} src={NASAImg} />\n      <p>{status}</p>\n      {lat && <p>Latitude: {lat}</p>}\n      {lng && <p>Longitude: {lng}</p>}\n    </div>\n  );\n};\n\nexport default NASA;\n"]},"metadata":{},"sourceType":"module"}