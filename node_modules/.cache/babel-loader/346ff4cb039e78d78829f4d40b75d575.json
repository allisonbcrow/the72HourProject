{"ast":null,"code":"var _jsxFileName = \"C:\\\\ElevenFiftyBlueBadge\\\\72hourproj\\\\src\\\\components\\\\apps\\\\Weather.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather(props) {\n  _s();\n\n  const [localweather, setLocalweather] = useState('');\n  const [query, setQuery] = useState('');\n  const [temp, setTemp] = useState(main.data.temp);\n  const [unit, setUnit] = useState('');\n  const oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\n}\n\n_s(Weather, \"ES3kuWGVBlanLp7bpzQJwFVe2Mw=\");\n\n_c = Weather;\n;\n\nconst convert = () => {\n  if (unit === \"C\") {\n    const newNum = main.data.temp * 1.8 + 32;\n    setTemp(Math.round(newNum));\n    setUnit(oppositeUnit);\n  }\n\n  if (unit === \"F\") {\n    const newNum = (main.data.temp - 32) * 5 / 9;\n    setTemp(Math.round(newNum));\n    setUnit(oppositeUnit);\n  }\n};\n\nconst getLonLat = () => {\n  _s2();\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      const lon = position.coords.longitude;\n      const lat = position.coords.latitude;\n      console.log(lat);\n      console.log(lon);\n      const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`).then(response => response).then(result => {\n        setLocalweather(result);\n        return;\n      });\n    });\n    useEffect(() => {\n      getLonLat();\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature \", props.newNum, \" \", props.unit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convert(),\n        children: [\"Convert to \", props.oppositeUnit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"value\",\n        children: [props.newNum, props.unit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s2(getLonLat, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/ElevenFiftyBlueBadge/72hourproj/src/components/apps/Weather.js"],"names":["React","useState","useEffect","Weather","props","localweather","setLocalweather","query","setQuery","temp","setTemp","main","data","unit","setUnit","oppositeUnit","convert","newNum","Math","round","getLonLat","navigator","geolocation","getCurrentPosition","position","lon","coords","longitude","lat","latitude","console","log","API_KEY","fetch","then","response","result"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAACU,IAAI,CAACC,IAAL,CAAUH,IAAX,CAAhC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AAGA,QAAMc,YAAY,GAAGF,IAAI,KAAK,GAAT,GAAe,GAAf,GAAqB,GAA1C;AACD;;GARQV,O;;KAAAA,O;AAQR;;AAED,MAAMa,OAAO,GAAG,MAAM;AACpB,MAAIH,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAMI,MAAM,GAAGN,IAAI,CAACC,IAAL,CAAUH,IAAV,GAAiB,GAAjB,GAAuB,EAAtC;AACAC,IAAAA,OAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAD,CAAP;AACAH,IAAAA,OAAO,CAACC,YAAD,CAAP;AACD;;AAED,MAAIF,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAMI,MAAM,GAAI,CAACN,IAAI,CAACC,IAAL,CAAUH,IAAV,GAAiB,EAAlB,IAAwB,CAAzB,GAA8B,CAA7C;AACAC,IAAAA,OAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAD,CAAP;AACAH,IAAAA,OAAO,CAACC,YAAD,CAAP;AACD;AACF,CAZD;;AAcA,MAAMK,SAAS,GAAG,MAAM;AAAA;;AACtB,MAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrD,YAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,SAA5B;AACA,YAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,QAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA,YAAMO,OAAO,GAAG,kCAAhB;AACAC,MAAAA,KAAK,CAAE,uDAAsDL,GAAI,QAAOH,GAAI,uBAAsBO,OAAQ,EAArG,CAAL,CACGE,IADH,CACQC,QAAQ,IAAIA,QADpB,EAEGD,IAFH,CAEQE,MAAM,IAAI;AACd9B,QAAAA,eAAe,CAAC8B,MAAD,CAAf;AACA;AACD,OALH;AAMD,KAZD;AAeAlC,IAAAA,SAAS,CAAC,MAAM;AACdkB,MAAAA,SAAS;AACV,KAFQ,EAEN,EAFM,CAAT;AAKA,wBACE;AAAA,8BACE;AAAA,mCAAgBhB,KAAK,CAACa,MAAtB,OAA+Bb,KAAK,CAACS,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEG,OAAO,EAAxB;AAAA,kCAAwCZ,KAAK,CAACW,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,mBAAyBX,KAAK,CAACa,MAA/B,EAAuCb,KAAK,CAACS,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;AAAC,CA/BJ;;IAAMO,S;;AAqCJ,eAAejB,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Weather(props) {\r\n  const [localweather, setLocalweather] = useState('');\r\n  const [query, setQuery] = useState('');\r\n  const [temp, setTemp] = useState(main.data.temp);\r\n  const [unit, setUnit] = useState('');\r\n\r\n\r\n  const oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\r\n};\r\n\r\nconst convert = () => {\r\n  if (unit === \"C\") {\r\n    const newNum = main.data.temp * 1.8 + 32;\r\n    setTemp(Math.round(newNum));\r\n    setUnit(oppositeUnit);\r\n  }\r\n\r\n  if (unit === \"F\") {\r\n    const newNum = ((main.data.temp - 32) * 5) / 9;\r\n    setTemp(Math.round(newNum));\r\n    setUnit(oppositeUnit);\r\n  }\r\n};\r\n\r\nconst getLonLat = () => {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lon = position.coords.longitude;\r\n      const lat = position.coords.latitude;\r\n      console.log(lat);\r\n      console.log(lon);\r\n      const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`)\r\n        .then(response => response)\r\n        .then(result => {\r\n          setLocalweather(result)\r\n          return;\r\n        })\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n      getLonLat();\r\n    }, []);\r\n\r\n\r\n    return (\r\n      <div>\r\n        <p>Temperature {props.newNum} {props.unit}</p>\r\n        <button onClick={convert()}>Convert to {props.oppositeUnit}</button>\r\n        <span className=\"value\">{props.newNum}{props.unit}</span>\r\n\r\n      </div>\r\n\r\n    )\r\n  }};\r\n\r\n\r\n\r\n\r\n\r\n  export default Weather;"]},"metadata":{},"sourceType":"module"}