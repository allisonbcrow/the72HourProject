{"ast":null,"code":"var _jsxFileName = \"C:\\\\ElevenFiftyBlueBadge\\\\72hourproj\\\\src\\\\components\\\\apps\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import Homepage from './Homepage';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\n  const [localweather, setLocalweather] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [temp, setTemp] = React.useState(localweather.main && localweather.main.temp);\n  const [unit, setUnit] = React.useState(\"C\");\n  console.log(temp); //geolocation to get the local weather\n\n  const getLonLat = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lon = position.coords.longitude;\n        const lat = position.coords.latitude;\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`).then(response => response.json()).then(result => {\n          setLocalweather(result);\n          return;\n        }).catch(err => console.log(err));\n      });\n    }\n  };\n\n  useEffect(() => {\n    getLonLat();\n  }, []); //give input to get other location weather\n\n  const searchInput = e => {\n    e.preventDefault();\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${API_KEY}`).then(response => response.json()).then(result => {\n      setLocalweather(result);\n      setQuery(\"\");\n    }).catch(err => console.log(err));\n  };\n\n  const oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\n\n  const convert = () => {\n    if (unit === \"C\") {\n      const newT = temp * 1.8 + 32;\n      setTemp(Math.round(newT));\n      setUnit(oppositeUnit);\n    }\n\n    if (unit === \"F\") {\n      const newT = (temp - 32) * 5 / 9;\n      setTemp(Math.round(newT));\n      setUnit(oppositeUnit);\n    }\n  };\n\n  function Homepage(props) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature \", props.temp, \" \", props.unit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.convert,\n        children: [\"Convert to \", props.oppositeUnit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"value\",\n        children: [props.localweather.main && props.localweather.main.temp_min, \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"value\",\n        children: [props.localweather.main && props.localweather.main.temp_max, \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Homepage, {\n    localweather: localweather,\n    getLonLat: getLonLat,\n    searchInput: searchInput,\n    setQuery: setQuery,\n    convert: convert,\n    oppositeUnit: oppositeUnit,\n    temp: temp,\n    unit: unit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Weather, \"mkY0AcrYngjTWZ9LlcyNe71Wi00=\");\n\n_c = Weather;\nexport default Weather; // import React, { useState } from 'react';\n// const baseURL = 'api.openweathermap.org/data/2.5/weather?;';\n// const key = '3b66b0c3c2f2e8c4e63630359492b5bf';\n// const Weather = () => {\n//   const [latitude, setlatitude] = useState('');\n//   const [longitude, setlongitude] = useState('');\n//   const [city, setcity] = useState('');\n//   const [temperature, setTemperature] = useState([]);\n//   const fetchResults = () => {\n//     let url = `https://api.openweathermap.org/data/2.5/weather?q=indianapolis&appid=${key}`;\n//     // let url = `${baseURL}at=${latitude}&lon=${longitude}&appid=${key}&units=metric`\n//     // url = latitude ? url + `&latitude=${latitude}` : url;\n//     // url = longitude ? url + `&longitude=${longitude}` : url;\n//   }\n//   let fetchURL = async () => {\n//     let response = await fetch(baseURL);\n//     let data = await response.json();\n//     setTemperature(data.main.temp);\n//   };\n// const Effect = () => {\n//   const [conversion, setConversion] = useState(\"\");\n//   console.log(conversion, '');\n// }\n//   const temperatureConversion = (e) => { \n// if(temperature === \"\") {\n//   (\"°K\");\n// } else if ()\n//     K − 273.15 = -273.1°C;\n//     (0°C × 9/5) + 32 = 32°F\n//     }\n// };\n//           return (\n//             <div className=\"main\">\n//               <div className=\"mainDiv\">\n//                 <div className=\"weather-item\">{city} </div>\n//                 <div className=\"weather-item\">{temperature} </div>\n//                 <button onClick={temperatureConversion}>Temperature Unit Conversion</button>\n//               </div>\n//             </div>\n//           )\n// };\n// // getPosition = () => {\n// //   return new Promise(function (resolve, reject) {\n// //     navigator.geolocation.getCurrentPosition(resolve, reject);\n// //   });\n// // }\n// // getWeather = async (latitude, longitude) => {\n// //   let WEATHER_API_KEY= '3b66b0c3c2f2e8c4e63630359492b5bf';\n// //   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?;at=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\n// //   const data = await api_call.json();\n// //   this.setState({\n// //     lat: latitude,\n// //     lon: longitude,\n// //     city: data.name,\n// //     temperatureC: Math.round(data.main.temp),\n// //     temperatureF: Math.round((data.main.temp) * 1.8 + 32),\n// //     icon: data.weather[0].icon,  \n// //   })\n// // }\n// // componentDidMount() {\n// //   this.getPosition()\n// //   .then((position) => {\n// //     this.getWeather(position.coords.latitude, position.coords.longitude)\n// //   })\n// //   .catch((err) => {\n// //     this.setState({ errorMessage: err.message });\n// //   });\n// //   this.timerID = setInterval(\n// //     () => \n// //     this.getWeather(this.state.lat, this.state.lon),\n// //     60000\n// //   );\n// // }\n// // componentWillUnmount() {\n// //   clearInterval(this.timerID);\n// // }\n// // render() {\n// //   const { city, temperatureC, temperatureF, icon} = this.state;\n// //    if (city) {\n// //      return (\n// //     <div className=\"App\">\n// //       <div className=\"weather-box\">\n// //         <div className=\"weather-item\">{city}</div>\n// //         <div className=\"weather-item\">{temperatureC} &deg;C <span className=\"slash\">/</span> {temperatureF} &deg;F</div>\n// //         <div>\n// //           <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\n// //       </div>\n// //     </div>\n// //     </div>\n// //      );\n// //    }\n// //   else {\n// //     return (\n// //       <div>Loading...</div>\n// //     )\n// //   }}}\n// export default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/ElevenFiftyBlueBadge/72hourproj/src/components/apps/Weather.js"],"names":["React","useState","useEffect","Weather","API_KEY","localweather","setLocalweather","query","setQuery","temp","setTemp","main","unit","setUnit","console","log","getLonLat","navigator","geolocation","getCurrentPosition","position","lon","coords","longitude","lat","latitude","fetch","then","response","json","result","catch","err","searchInput","e","preventDefault","oppositeUnit","convert","newT","Math","round","Homepage","props","temp_min","temp_max"],"mappings":"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2B+B,KAAK,CAACrC,YAAN,CAAmBM,IAAnB,CAAwBiC,QAA5E;AAAA;AAAA;AAAA;AAAA;AAAA,cANX;AAAA;AAAA;AAAA;AAAA;AAAA,YADG;AAUH;;AAEC,sBACI,QAAC,QAAD;AACA,IAAA,YAAY,EAAEvC,YADd;AAEA,IAAA,SAAS,EAAEW,SAFX;AAGA,IAAA,WAAW,EAAEiB,WAHb;AAIA,IAAA,QAAQ,EAAEzB,QAJV;AAKA,IAAA,OAAO,EAAE6B,OALT;AAMA,IAAA,YAAY,EAAED,YANd;AAOA,IAAA,IAAI,EAAE3B,IAPN;AAQA,IAAA,IAAI,EAAEG;AARN;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAlFQT,O;;KAAAA,O;AAmFT,eAAeA,OAAf,C,CAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import Homepage from './Homepage';\r\n\r\nfunction Weather() {\r\n    const API_KEY = '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n    const [localweather, setLocalweather] = useState([]);\r\n    const [query, setQuery] = useState(\"\");\r\n    const [temp, setTemp] = React.useState(localweather.main && localweather.main.temp);\r\n    const [unit, setUnit] = React.useState(\"C\");\r\nconsole.log(temp)\r\n    //geolocation to get the local weather\r\n    const getLonLat = () => {\r\n        if(navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lon = position.coords.longitude;\r\n                const lat = position.coords.latitude;\r\n                fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`)\r\n                    .then(response => response.json())\r\n                    .then(result => {\r\n                        setLocalweather(result)\r\n                        return;\r\n                    })\r\n                    .catch(err => console.log(err));\r\n            })\r\n}\r\n}\r\n\r\nuseEffect(() => {\r\n    getLonLat();\r\n}, [])\r\n\r\n    //give input to get other location weather\r\n    const searchInput = (e) => {\r\n        e.preventDefault()\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${API_KEY}`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setLocalweather(result)\r\n                setQuery(\"\")\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    const oppositeUnit = unit === \"C\" ? \"F\" : \"C\";\r\n\r\n    const convert = () => {\r\n        if (unit === \"C\") {\r\n            const newT = temp * 1.8 + 32;\r\n            setTemp(Math.round(newT));\r\n            setUnit(oppositeUnit);\r\n        }\r\n\r\n        if (unit === \"F\") {\r\n            const newT = ((temp - 32) * 5) / 9;\r\n            setTemp(Math.round(newT));\r\n            setUnit(oppositeUnit);\r\n        }\r\n    };\r\n\r\n    function Homepage(props) {\r\n      return (\r\n   <div>\r\n              <p>\r\n                  Temperature {props.temp} {props.unit}\r\n              </p>\r\n              <button onClick={props.convert}>Convert to {props.oppositeUnit}</button>\r\n              <span className=\"value\">{props.localweather.main && props.localweather.main.temp_min} °C</span>\r\n              <span className=\"value\">{props.localweather.main && props.localweather.main.temp_max} °C</span>\r\n          </div>\r\n      )\r\n  }\r\n  \r\n    return (\r\n        <Homepage \r\n        localweather={localweather}\r\n        getLonLat={getLonLat} \r\n        searchInput={searchInput} \r\n        setQuery={setQuery}\r\n        convert={convert}\r\n        oppositeUnit={oppositeUnit}\r\n        temp={temp}\r\n        unit={unit}\r\n        />\r\n    )\r\n\r\n}\r\nexport default Weather;\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const baseURL = 'api.openweathermap.org/data/2.5/weather?;';\r\n// const key = '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n\r\n\r\n// const Weather = () => {\r\n//   const [latitude, setlatitude] = useState('');\r\n//   const [longitude, setlongitude] = useState('');\r\n//   const [city, setcity] = useState('');\r\n//   const [temperature, setTemperature] = useState([]);\r\n\r\n\r\n//   const fetchResults = () => {\r\n//     let url = `https://api.openweathermap.org/data/2.5/weather?q=indianapolis&appid=${key}`;\r\n//     // let url = `${baseURL}at=${latitude}&lon=${longitude}&appid=${key}&units=metric`\r\n//     // url = latitude ? url + `&latitude=${latitude}` : url;\r\n//     // url = longitude ? url + `&longitude=${longitude}` : url;\r\n//   }\r\n\r\n//   let fetchURL = async () => {\r\n//     let response = await fetch(baseURL);\r\n//     let data = await response.json();\r\n//     setTemperature(data.main.temp);\r\n//   };\r\n\r\n// const Effect = () => {\r\n//   const [conversion, setConversion] = useState(\"\");\r\n//   console.log(conversion, '');\r\n// }\r\n\r\n//   const temperatureConversion = (e) => { \r\n// if(temperature === \"\") {\r\n//   (\"°K\");\r\n// } else if ()\r\n//     K − 273.15 = -273.1°C;\r\n//     (0°C × 9/5) + 32 = 32°F\r\n\r\n//     }\r\n// };\r\n\r\n\r\n//           return (\r\n//             <div className=\"main\">\r\n//               <div className=\"mainDiv\">\r\n//                 <div className=\"weather-item\">{city} </div>\r\n//                 <div className=\"weather-item\">{temperature} </div>\r\n//                 <button onClick={temperatureConversion}>Temperature Unit Conversion</button>\r\n//               </div>\r\n//             </div>\r\n//           )\r\n// };\r\n\r\n\r\n// // getPosition = () => {\r\n// //   return new Promise(function (resolve, reject) {\r\n// //     navigator.geolocation.getCurrentPosition(resolve, reject);\r\n// //   });\r\n// // }\r\n// // getWeather = async (latitude, longitude) => {\r\n// //   let WEATHER_API_KEY= '3b66b0c3c2f2e8c4e63630359492b5bf';\r\n// //   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?;at=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`);\r\n// //   const data = await api_call.json();\r\n\r\n\r\n// //   this.setState({\r\n// //     lat: latitude,\r\n// //     lon: longitude,\r\n// //     city: data.name,\r\n// //     temperatureC: Math.round(data.main.temp),\r\n// //     temperatureF: Math.round((data.main.temp) * 1.8 + 32),\r\n// //     icon: data.weather[0].icon,  \r\n// //   })\r\n// // }\r\n\r\n// // componentDidMount() {\r\n// //   this.getPosition()\r\n// //   .then((position) => {\r\n// //     this.getWeather(position.coords.latitude, position.coords.longitude)\r\n// //   })\r\n// //   .catch((err) => {\r\n// //     this.setState({ errorMessage: err.message });\r\n// //   });\r\n\r\n// //   this.timerID = setInterval(\r\n// //     () => \r\n// //     this.getWeather(this.state.lat, this.state.lon),\r\n// //     60000\r\n// //   );\r\n// // }\r\n\r\n// // componentWillUnmount() {\r\n// //   clearInterval(this.timerID);\r\n// // }\r\n\r\n// // render() {\r\n// //   const { city, temperatureC, temperatureF, icon} = this.state;\r\n// //    if (city) {\r\n// //      return (\r\n// //     <div className=\"App\">\r\n// //       <div className=\"weather-box\">\r\n// //         <div className=\"weather-item\">{city}</div>\r\n// //         <div className=\"weather-item\">{temperatureC} &deg;C <span className=\"slash\">/</span> {temperatureF} &deg;F</div>\r\n// //         <div>\r\n// //           <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\r\n// //       </div>\r\n// //     </div>\r\n// //     </div>\r\n// //      );\r\n// //    }\r\n// //   else {\r\n// //     return (\r\n// //       <div>Loading...</div>\r\n// //     )\r\n// //   }}}\r\n\r\n\r\n\r\n\r\n// export default Weather;\r\n"]},"metadata":{},"sourceType":"module"}